const { createContext, useContext, Children } = require("react");

const AuthContext = createContext()
//createContext creates a container to store and share values (like user info or functions) across your React app without passing props manually through every component

//stores the login state of the user

export const AuthProvider = ({ children }) => {
    const handleLogout=async()=>{
        await signOut(auth);
        router.push('/home')
    }
return(
    <>
    <AuthContext.Provider value={{handlelogout, user}}>
        {Children}
        //children are all pages  and componentsthat need to shre the 'login' information

    </AuthContext.Provider>
    </>
)
}




export default useAuth =()=> useContext(AuthContext)
//useAuth is a custom hook that allows you to access the AuthContext easily in any component
//useContext is a React hook that lets you access the value of a context directly in your component

// //magine:
// The teacher has a big box called "AuthContext" on the table.

// This box has useful things inside ‚Äî like a logout button üü†.

// All the students (your app's pages/components) can ask the teacher:

// ‚ÄúHey, what‚Äôs inside that AuthContext box?‚Äù

// BUT‚Ä¶ someone has to put things into the box first, right?
// That‚Äôs what this part does:
// js
// Copy
// Edit
// <AuthContext.Provider value={{ handleLogout }}>
//   {children}
// </AuthContext.Provider>
// This is like the teacher opening the box and placing the Logout button inside, and saying:

// ‚ÄúOkay class! From now on, anyone who needs to log out, come get this logout button from the AuthContext box!‚Äù

//  Summary:
// AuthProvider = Teacher who sets up the box

// AuthContext.Provider = Puts things into the box

// value={{ handleLogout }} = The things inside the box (like the Logout button)

// {children} = All the kids (your app pages) who can now open the box and use what‚Äôs insi